<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[IOS12+Swift4+Xcode10开发 - 2 木琴APP]]></title>
    <url>%2F2019%2F03%2F05%2FIOS12%2BSwift4%2BXcode10%E5%BC%80%E5%8F%91%20-%202%20%E6%9C%A8%E7%90%B4APP%2F</url>
    <content type="text"><![CDATA[项目介绍按下不同的按键，发出不同的音调。 Tag // 3.1 通过tag获取被按下的buttonlet indexTag = sender.tag 多媒体播放器// 1.引入多媒体播放器import AVFoundation // 2.声明播放器，用于播放url的多媒体文件var player:AVAudioPlayer! // 3.4 将“音频”放入“播放器”player = try AVAudioPlayer(contentsOf: url!) // 3.5 播放音频player.play() url // Bundlez最外面(苹果为整个取得APP的名字) // main为主要同名文件夹 // 直接可以取到的原因：SoundFile是一个组，不是文件夹 let url = Bundle.main.url(forResource: “note(indexTag)”, withExtension: “wav”) 编组：可以帮助项目整理同类型，且不同使用文件，获取文件更方便 抛异常 // 抛异常: 播放器可能为空 do{}catch{print(error)} 源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import UIKit// 1.引入多媒体播放器import AVFoundationclass ViewController: UIViewController&#123; // 2.声明播放器，用于播放url的多媒体文件 var player:AVAudioPlayer! // 音频资源 let sounds = ["note1","note2","note3","note4","note5","note6","note7"] override func viewDidLoad() &#123; super.viewDidLoad() &#125; // 3.根据按下的button，播放不同的声音 // 用户按下这个控件sender，按钮 @IBAction func notePressed(_ sender: UIButton) &#123; // 3.1 通过tag获取被按下的button 1-5,下标需要为0-4 let indexTag:Int = sender.tag - 1 // 3.2 播放音频 play(tag:indexTag) &#125; /* 创建一个发出声音的功能函数 输入为第几个声音Int */ func play(tag:Int)&#123; // 1 根据tag不同，获得不同“音频” // Bundlez最外面(苹果为整个取得APP的名字) // main为主要同名文件夹 // 直接可以取到的原因：SoundFile是一个组，不是文件夹 let url = Bundle.main.url(forResource: sounds[tag], withExtension: "wav") // 抛异常: 播放器可能为空 do&#123; // 2 将“音频”放入“播放器” player = try AVAudioPlayer(contentsOf: url!) // 3 播放音频 player.play() &#125;catch&#123; print(error) &#125; &#125;&#125;]]></content>
      <categories>
        <category>APP</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IOS12+Swift4+Xcode10开发 - 1 摇色子APP]]></title>
    <url>%2F2019%2F03%2F05%2FIOS12%2BSwift4%2BXcode10%E5%BC%80%E5%8F%91%20-%201%20%E6%91%87%E8%89%B2%E5%AD%90APP%2F</url>
    <content type="text"><![CDATA[项目介绍点击按钮或者摇晃手机，两个骰子摇晃改变。 UI设计 IBOutlet和IBActionOutlet 插座 ：定义控件 Action 动作 ：控件动作 步骤control 拖拽定义控件IBOutlet和动作IBAction TIPS改名方式需要先断开连接，再修改变量名，再建立连接 否则运行时会抛异常：空指针问题 命名方法文件名 大驼峰 变量名 小驼峰 快捷键command+R:运行 随机数和数组实现图片使用数组存储String类型的图片文件名 随机数获取0-5的数字作为数组下标 将功能放进func函数中，代码更改性更强 12345678910111213141516171819202122232425262728293031323334353637383940414243444546//// ViewController.swift// Dicee//// Created by iris on 2019/3/5.// Copyright © 2019 IrisWang. All rights reserved.//import UIKitclass ViewController: UIViewController &#123; // 一、随机数 var index1:Int = 0 var index2:Int = 0 // 二、数组 let diceArray = ["dice1","dice2","dice3","dice4","dice5","dice6"] @IBOutlet weak var diceeImageView1: UIImageView! @IBOutlet weak var diceeImageView2: UIImageView! override func viewDidLoad() &#123; super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. // 初始的数字也是随机的 updateDiceImage() &#125; @IBAction func rollButton(_ sender: Any) &#123; // 更新骰子 updateDiceImage() &#125; // 三、函数:将功能放进函数中 // 更新骰子函数 func updateDiceImage()&#123; // 1.获取随机数 // 闭区间 0...5 取0-5这几个数 index1 = Int.random(in: 0...5) index2 = Int.random(in: 0...5) // 2.获取数组的某一个 // diceArray[index1] // 3.摇骰子功能 command+R:运行 diceeImageView1.image = UIImage(named: diceArray[index1]) diceeImageView2.image = UIImage(named: diceArray[index2]) &#125;&#125; 摇一摇功能谷歌关键词：shake apple documentation 给出结果：motionEnded 123456// 四、摇一摇功能// 手势结束之后，要进行的行为 motionEndedoverride func motionEnded(_ motion: UIEvent.EventSubtype, with event: UIEvent?) &#123; // 更新骰子 updateDiceImage()&#125; 练习——占卜球]]></content>
      <categories>
        <category>APP</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用Swift开发iOS10 - 7 定制Table Views]]></title>
    <url>%2F2019%2F03%2F05%2F%E7%94%A8Swift%E5%BC%80%E5%8F%91iOS10%20-%207%20%E5%AE%9A%E5%88%B6Table%20Views%2F</url>
    <content type="text"><![CDATA[项目简介开始用Swift开发iOS 10 - 6 创建简单的Table Based App是basic风格的Table，这一部分将： 使用UITableViewController 代替 UITableView 展示table view cell中不同的图片显示方式 设计定制的table view cell来替代basic的table view cell 使用UITableViewController新建一个Table View App 新建项目FoodPin，模板为”Single View application” 删除Main.storyboard中的 view controller，删除ViewController.swift 拖动一个Table View Controller到IB中，选中其Is Initial View Controller 新建类RestaurantTableViewController，继承至UITableViewController。 12345import UIKitimport Foundationclass RestaurantTableViewController: UITableViewController&#123;//code&#125; 将Table View Controller的Class属性设置为RestaurantTableViewController。 在simpletable-image1.zip和simpletable-image2.zip处下载图片，拖到asset catalog 在类RestaurantTableViewController中添加以变量 1var restaurantNames = [&quot;Cafe Deadend&quot;, &quot;Homei&quot;, &quot;Teakha&quot;, &quot;Cafe Loisl&quot;, &quot;PetiteOyster&quot;, &quot;For Kee Restaurant&quot;, &quot;Po&apos;s Atelier&quot;, &quot;Bourke Street Bakery&quot;, &quot;Haigh&apos;sChocolate&quot;, &quot;Palomino Espresso&quot;, &quot;Upstate&quot;, &quot;Traif&quot;, &quot;Graham Avenue Meats&quot;,&quot;Waffle &amp; Wolf&quot;, &quot;Five Leaves&quot;, &quot;Cafe Lore&quot;, &quot;Confessional&quot;, &quot;Barrafina&quot;,&quot;Donostia&quot;, &quot;Royal Oak&quot;, &quot;CASK Pub and Kitchen&quot;] 在类RestaurantTableViewController中添加代码： 123456789override func tableView(_ tableView: UITableView, cellForRowAt indexPath:IndexPath) -&gt; UITableViewCell &#123; let cellIdentifier = &quot;Cell&quot; let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier,for: indexPath) // Configure the cell... cell.textLabel?.text = restaurantNames[indexPath.row] cell.imageView?.image = UIImage(named: &quot;restaurant.jpg&quot;)return cell &#125; 插入代码 123456789101112131415161718 override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell &#123; let cellIdentifier = &quot;Cell&quot; let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath) // Configure the cell... cell.textLabel?.text = restaurantNames[indexPath.row] cell.imageView?.image = UIImage(named: &quot;restaurant.jpg&quot;) return cell &#125; override func numberOfSections(in tableView: UITableView) -&gt; Int &#123; return 1 &#125; override func tableView(_ tableView: UITableView, numberOfRowsInSectionsection: Int) -&gt; Int &#123; return restaurantNames.count &#125; 在类RestaurantTableViewController中加入图片名称变量： 123456var restaurantImages = [&quot;cafedeadend.jpg&quot;, &quot;homei.jpg&quot;, &quot;teakha.jpg&quot;,&quot;cafeloisl.jpg&quot;, &quot;petiteoyster.jpg&quot;, &quot;forkeerestaurant.jpg&quot;, &quot;posatelier.jpg&quot;,&quot;bourkestreetbakery.jpg&quot;, &quot;haighschocolate.jpg&quot;, &quot;palominoespresso.jpg&quot;,&quot;upstate.jpg&quot;, &quot;traif.jpg&quot;, &quot;grahamavenuemeats.jpg&quot;, &quot;wafflewolf.jpg&quot;,&quot;fiveleaves.jpg&quot;, &quot;cafelore.jpg&quot;, &quot;confessional.jpg&quot;, &quot;barrafina.jpg&quot;,&quot;donostia.jpg&quot;, &quot;royaloak.jpg&quot;, &quot;caskpubkitchen.jpg&quot;] 并修改对应代码： cell.imageView?.image = UIImage(named: restaurantImages[indexPath.row]) 定制Table View Cells 修改Table View Cell的Sytle变为Custom，Identifier为Cell 修改Table View 的Row Height为80 确认Table View Cell 的Custom被选择打钩，且Row Height为80 拖动image view到Cell中 拖动三个label到Cell中，文本分别是Name，Location，Type。Name 的font为Headline；Location的font style为Light，font size为14，font color为Dark Gray；Type**font style为Light，font size**为13。 把三个label设置成一个vertical stack view，其spacing为1 把vertical stack view和Image View设置成一个horizontal stack view，其spacing为10 为vertical stack view设置上下左右边距约束；为图片设置宽和高的约束 处理约束问题 为Custom Cell创建类 创建继承至UITableViewCell的类RestaurantTableViewCell 在RestaurantTableViewCell中建立四个outlet，分别对应图片和三个label 1234@IBOutlet var nameLabel: UILabel!@IBOutlet var locationLabel: UILabel!@IBOutlet var typeLabel: UILabel!@IBOutlet var thumbnailImageView: UIImageView! 建立代码中接口与storyboard之间的联系 修改Table View Controller代码 由于已经为Custom Cell创建了类RestaurantTableViewCell，所以Table View Controller中生成Cell的待修改为： 12let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath) as! RestaurantTableViewCell 由于Cell的风格不是sytle了，而是定制的，所以文本和图片代码要做出修改： 12cell.nameLabel.text = restaurantNames[indexPath.row]cell.thumbnailImageView.image = UIImage(named: restaurantImages[indexPath.row]) 图片圆角 可通过UIView的layer属性（CALayer）修改图片圆脚，cornerRadius表示圆角的半径，由于图片的尺寸是60*60，所以圆角的半径设置为30后，图片看上去是个圆。 12cell.thumbnailImageView.layer.cornerRadius = 30.0cell.thumbnailImageView.clipsToBounds = true 位置和类型label设置 添加“Type”和“Location”。添加如下两个数组变量： 1234var restaurantLocations = [&quot;Hong Kong&quot;, &quot;Hong Kong&quot;, &quot;Hong Kong&quot;, &quot;Hong Kong&quot;, &quot;Hong Kong&quot;, &quot;Hong Kong&quot;, &quot;Hong Kong&quot;, &quot;Sydney&quot;, &quot;Sydney&quot;, &quot;Sydney&quot;, &quot;NewYork&quot;, &quot;New York&quot;, &quot;New York&quot;, &quot;New York&quot;, &quot;New York&quot;, &quot;New York&quot;, &quot;New York&quot;, &quot;London&quot;, &quot;London&quot;, &quot;London&quot;, &quot;London&quot;] var restaurantTypes = [&quot;Coffee &amp; Tea Shop&quot;, &quot;Cafe&quot;, &quot;Tea House&quot;, &quot;Austrian Causual Drink&quot;, &quot;French&quot;, &quot;Bakery&quot;, &quot;Bakery&quot;, &quot;Chocolate&quot;, &quot;Cafe&quot;, &quot;American Seafood&quot;, &quot;American&quot;, &quot;American&quot;, &quot;Breakfast &amp; Brunch&quot;, &quot;Coffee &amp; Tea&quot;, &quot;Coffee &amp; Tea&quot;, &quot;Latin American&quot;, &quot;Spanish&quot;, &quot;Spanish&quot;, &quot;Spanish&quot;, &quot;British&quot;, &quot;Thai&quot;] 然后再在Cell时赋值即可： 12cell.locationLabel.text = restaurantLocations[indexPath.row] cell.typeLabel.text = restaurantTypes[indexPath.row] 结果： 练习 重新设计界面： 修改Table View和Table View Cell的Row Height都为300。 重新设计图片与label的之间的层次结构，并修改图片的大小和其他一些约束。 删除图片圆角 ###]]></content>
      <categories>
        <category>IOS学习</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用Swift开发iOS10 - 6 创建简单的Table Based App]]></title>
    <url>%2F2019%2F03%2F04%2F%E7%94%A8Swift%E5%BC%80%E5%8F%91iOS10%20-%206%20%E5%88%9B%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84Table%20Based%20App%2F</url>
    <content type="text"><![CDATA[项目简介 table view应该是iOS应用中最常用的UI element。最好的例子就是iPhone自带的一些应用，如电话，邮件，设置等。TED，Google+，Airbnb，微信等等都是很好例子。 参考链接：https://www.jianshu.com/p/25f062e903cf 作者：Andy_Ron 创建一个项目 项目名称为SimpleTable，模板为”Single View application” 设计UI 选中Main.storyboard，从Object library中拖动Table View进入视图 改变Table View的大小至整个view，修改属性Prototype Cells为1 选中Table View Cell，修改Style为Basic，Identifier为Cell。table view cell的标准类型有 basic、right detail、left detail 和 subtitle，当然还有定制类型custom。 选中Table View，设置四个spacing约束，上下左右的距离都设置为0 为UITableView添加两个协议 Object library中的每一UI component都是对应一个class，如 Table View就是对应UITableView。可以通过点击并悬停在UI component上查看对应的class和介绍。 在ViewController.swift文件的UIViewController后，添加代码, UITableViewDataSource, UITableViewDelegate，表示ViewController类实现了UITableViewDataSource，UITableViewDelegate两个协议。 出现红色感叹号，这是xcode的问题提示，点击参看问题描述： Type ‘ViewController’ does not conform to protocol‘UITableViewDataSource’ 问题描述为ViewController不符合协议UITableViewDataSource。通过command+点击到UITableViewDataSource中查看： 1234567891011121314151617public protocol UITableViewDataSource : NSObjectProtocol &#123; @available(iOS 2.0, *) public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int // Row display. Implementers should *always* try to reuse cells by setting each cell's reuseIdentifier and querying for available reusable cells with dequeueReusableCellWithIdentifier: // Cell gets various attributes set automatically based on table (separators) and data source (accessory views, editing controls) @available(iOS 2.0, *) public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell @available(iOS 2.0, *) optional public func numberOfSections(in tableView: UITableView) -&gt; Int // Default is 1 if not implemented @available(iOS 2.0, *) optional public func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? // fixed font style. use custom view (UILabel) if you want something different //...&#125; UITableViewDataSource协议中定义了很多方法，除了前两个方法没有optional其它都有.有的表示这个方法不一定要实现，没有的就一定要实现，把这个两个方法实现了，问题提示就会消失。这两个方法从名字和返回值类型也大概能知道做了什么： public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int 一个section有几行，也就是一个section有几个UITableViewCell， section就是一组UITableViewCell的意思，Table View可以定义多个section，默认是一个。 public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell 返回每一行的 UITableViewCell 在ViewController.swift中定义一个变量restaurantNames，类型是数组，表示一系列餐馆的名字。 1var restaurantNames = [&quot;Cafe Deadend&quot;, &quot;Homei&quot;, &quot;Teakha&quot;, &quot;Cafe Loisl&quot;, &quot;PetiteOyster&quot;, &quot;For Kee Restaurant&quot;, &quot;Po&apos;s Atelier&quot;, &quot;Bourke Street Bakery&quot;, &quot;Haigh&apos;sChocolate&quot;, &quot;Palomino Espresso&quot;, &quot;Upstate&quot;, &quot;Traif&quot;, &quot;Graham Avenue Meats AndDeli&quot;, &quot;Waffle &amp; Wolf&quot;, &quot;Five Leaves&quot;, &quot;Cafe Lore&quot;, &quot;Confessional&quot;,&quot;Barrafina&quot;, &quot;Donostia&quot;, &quot;Royal Oak&quot;, &quot;CASK Pub and Kitchen&quot;] 定义UITableViewDataSource的两个方法： 12345678910111213141516func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int &#123; // 1 return restaurantNames.count &#125; func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell &#123; // 2 let cellIdentifier = &quot;Cell&quot; let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath) // 3 cell.textLabel?.text = restaurantNames[indexPath.row] return cell &#125; 1 餐馆的数目就是section的行数 2 “Cell”与之前定义的UITableViewCell的Identifier属性是对应的。dequeueReusableCell方法是产生一个UITableViewCell。 3 UITableViewCell中有可算属性textLabel，其实就是一个UILabel，由于是可选属性，调用时也用可选链式调用cell.textLabel?.text]]></content>
      <categories>
        <category>IOS学习</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用Swift开发iOS10 - 3 傻瓜式制作APP图标]]></title>
    <url>%2F2019%2F03%2F04%2F%E7%94%A8Swift%E5%BC%80%E5%8F%91iOS10%20-%203%20%E5%82%BB%E7%93%9C%E5%BC%8F%E5%88%B6%E4%BD%9CAPP%E5%9B%BE%E6%A0%87%2F</url>
    <content type="text"><![CDATA[使用真机测试的效果如下： 设计网址：https://www.canva.cn/ step1 自定义尺寸：1024 x 1024 step2 设计：拖入背景和元素 step3 下载得到png格式的图标 生成图标网址：https://appicon.co/ 将图片拖入网站，选择需要的格式，下载得到zip 解压后得到 图标拖入工程项目中需要各种大小的icon 进入Assets.xcassets的文件夹，删除AppIcon.appiconset文件夹 再将上步解压后的文件夹拖入 消除警告，直接键盘delete删除多余图片即可]]></content>
      <categories>
        <category>IOS学习</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用Swift开发iOS10 - 5 Stack View设计UI]]></title>
    <url>%2F2019%2F03%2F04%2F%E7%94%A8Swift%E5%BC%80%E5%8F%91iOS10%20-%205%20Stack%20View%E8%AE%BE%E8%AE%A1UI%2F</url>
    <content type="text"><![CDATA[项目介绍 参考链接：https://www.jianshu.com/p/25f062e903cf 作者：Andy_Ron 这篇文章将学习到： 用Stack View布局UI。 用image views展示图片。 用内建的asset catalog管理图片。 用Size Classes适配Stack View Stack View是什么Stack View为在纵向或横向布置一个视图的集合，提供了一个流线型界面。可以用stack view将很多UI对象合成一个。视图嵌入一个stack view里以后,就不再需要定义自动布局约束. Stack View管理它子视图的布局,然后自动提供布局约束。这意味着子视图已经准备好去适应不同的屏幕尺寸。此外，也可以嵌入一个stack view到另一个stack view来构建更复杂的用户界面。 Xcode提供两种方法使用Stack View： 直接从Object library中拖出stack view（纵向或横向），然后把其他视图拖动stack view 选中一些视图，然后点击Interface Builder editor右下角一组按钮中的stack按钮 步骤Assets.xcassetsXcode中添加图片 Lable布局用Stack View布局title的label 先拖入两个label。其一修改label的title为“Instant Developer”，字体大小为40 points，font style为medium，字体颜色为红色；其二修改label的title为“Get help from experts in 15 minutes” 选择Main.storyboard，从Object library中拖出Vertical Stack View到storyboard中 拖出两个label到stack view中。一旦label进入stack view中，它就自动调整大小以适应label。 选择stack view，在属性检查器中修改Alignment参数为center，这样使stack view中的label水平居中对齐。 stack view的几个属性： axis stack view中对象是水平放置还是垂直放置，也就是Vertical Stack View和Horizontal Stack View之间的切换 alignment stack view中对象的对齐方式 distribution image布局 拖动三个image view对象。并修改其image属性为user1，user2，user3。粗略调整图片的带下，放在一个水平，大概如下： 选中三个image view，击Interface Builder editor右下角一组按钮中的stack按钮，则生成一个新的horizontal stack view。 修改新生成的horizontal stack view的属性，spacing为 10，表示图片之间的间距，Distribution为Fill Equally 组合stack view后添加布局约束 同时选中两个stack view，点击stack 按钮，再生成一个新的大vertical stack view 选中大的stack view，添加space constraints，上，左右，分别为70，0，0 添加约束后，如果出现布局问题，可通过issue indicator解决：点击问题 看预览assistant editor，查看其它设备会发现两个问题： Instant Developer label文本在小屏幕设备被截断 图片的宽高比改变了]]></content>
      <categories>
        <category>IOS学习</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IOS开发 - 每日一个Swift小程序]]></title>
    <url>%2F2019%2F03%2F04%2FIOS%E5%BC%80%E5%8F%91%20-%20%E6%AF%8F%E6%97%A5%E4%B8%80%E4%B8%AASwift%E5%B0%8F%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[swift学习日记——每日一个小程序 名称：30DaysofSwift 工具： Xcode 10.1, Swift 4.2, UIKit 思路来源：samvlu ，Allen_朝辉，nimomeng 用例方面：主要参考nimomeng的case，也参考了Sam Lu的40个小项目，也参考了Allen_朝辉的项目 代码方面：前两个项目学习了Storyboard，然而实际上多人协作的项目中我们尽可能少用Storyboard，因为很容易出现冲突问题。况且从学习的角度，storyboard很难说清楚操作步骤是什么。因此以后的项目都尽量手写。 开源项目：暂未整理完成 Project 3 : 计时器 Change Custom Font 学习内容： 具体实现 SnapKit：项目的自动布局 Timer 计时器：fire()与invalidate() guard语句：guard 判断合理条件，保证判断条件简约。详见 guard详解 Project 2 : 改变字体 Change Custom Font 学习内容： 获取字体属性：UIFont.familyNames可以存储为数组，可以直接输出、或通过索引获取 随机获取字体：随机数arc4random()格式为UInt32，需转为Int，再对数组长度取余。获得范围随机数 字体设置：words.font=UIFont(name: “字体名称”, size: 20) 按钮边框设置：圆角cornerRadius，颜色borderColor，该颜色需要CGColor，因此需要将UIColor转为CGColor 源码： 1234567891011121314151617181920212223242526272829303132333435363738394041//// ViewController.swift// ChangeCustomFont//// Created by iris on 2019/2/25.// Copyright © 2019 iris. All rights reserved.//import UIKitclass ViewController: UIViewController &#123; @IBOutlet weak var words: UILabel! @IBOutlet weak var change: UIButton! override func viewDidLoad() &#123; super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. // 按钮的边框粗细、圆角、颜色 // 注：颜色需要CGColor，因此需要将UIColor转为CGColor change.layer.borderWidth = 1; change.layer.cornerRadius = 8; change.layer.borderColor = UIColor.blue.cgColor &#125; // 字体改变：根据随机数，随机获取系统字体的第i个 @IBAction func change(_ sender: Any) &#123; // 1.存储字体名称y为数组 let familyNames_arr = UIFont.familyNames let count:Int = familyNames_arr.count // 2.获取随机数 // 平常的随机数：0 ~ X,UInt32格式，需要转为Int let random1:Int = Int(arc4random()) // 限制长度的随机数，取余 ：0 ~ X let random2:Int = random1 % count // 3.设置字体为第 随机数 的字体 print(familyNames_arr[random2]) words.font=UIFont(name: familyNames_arr[random2], size: 20) &#125;&#125; Project 1 : 加法计算器 Calculation of Add 学习内容： 具体实现 IOS的UI布局：使用Storyboard和其辅助视图添加部件，且为部件定义，加上动作 值的转化：Option获取 -&gt; String -&gt; Float计算 -&gt; String展示]]></content>
      <categories>
        <category>IOS开发</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用Swift开发iOS10 - 4 AutoLayout]]></title>
    <url>%2F2019%2F03%2F03%2F%E7%94%A8Swift%E5%BC%80%E5%8F%91iOS10%20-%204%20AutoLayout%2F</url>
    <content type="text"><![CDATA[项目介绍Xcode提供了两种方法定义Auto Layout的约束： Auto Layout工具栏 Control-drag 使用Auto Layout使label到中央Auto Layout工具栏提供了四个按钮： Stack - 组合views变成一个stack view Align - 构建对齐约束 Pin - 构建空间约束，例如UI的宽度，高度，边距等 Issues - 解决布局问题 使用Control-drag使得label到右下角用control+drag方法来添加spacing constraint。 按住control，从label上向右拖动，拖出label到视图后松开，出现弹框，选择 “Trailing space to container margin” ，表示设置右边距的约束。 类似2的方法，向下拖动松开，选择弹框中的”Vertical Spacing to Bottom Layout Guide”，表示设置了下边距约束。 所有约束线变成了蓝色实线，蓝色实线表示约束正常。 document outline上又出现两个约束 使用Auto Layou\Control-drag使得label水平居中，距离上边40]]></content>
      <categories>
        <category>IOS学习</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习整理 - 未完待续]]></title>
    <url>%2F2019%2F03%2F03%2F%E5%AE%9E%E4%B9%A0%E6%95%B4%E7%90%86%20-%20%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD%2F</url>
    <content type="text"><![CDATA[实习的资料整理。 包括银行、互联网公司。 包括各公司的福利整合。 农业银行截止日期：3.20日申请入口 宣传网页： https://i.eqxiu.com/s/iqd0XQ71?eqrcode=1&amp;share_level=5&amp;from_user=b819b53f-2d44-49e8-aa62-fa07f712a8ef&amp;from_id=c8995d88-6327-45bc-97dc-a4ad26ef27cb&amp;share_time=1551152498524&amp;from=timeline&amp;isappinstalled=0 福利工资17k。公积金5200。 农行总部编制 档案北京管理 北上广天成西 六地即可 扩招截止20年 这两年把握机会 进入顶级国企 全国统一待遇 当地公积金封顶 上海数据中心 部门 免费房子（一辈子） 招商银行时间：3.4-4.7内推网页： https://cmbjob.ccc.cmbchina.com/positionlistshare.html?v=3.0&amp;refereeId=847a71a8-f981-4d7a-abd3-d846ddef0634&amp;refereeCode=674440&amp;recruitType=3&amp;positionClass=&amp;deptId=003 福利180w行员贷款福利 招行有免费房子住的（只有一年） 花旗银行 发简历给HR 微信https://mp.weixin.qq.com/s/Yyxep9M6z525g-c6czt78Q 发简历给HR 快手实习招聘 腾讯时间：提前批3月9日，普招3.31 字节跳动时间：未知。一直在发布岗位，投递后5个工作日内安排面试内推码：6PFRDJMhttps://job.toutiao.com/2018/intern_referral/?token=5lT3rIxuAZuD18qmg3DYlg%3D%3D&amp;key=MjU4NDcsMzE5MTEsMzE5MTQsMzE5MTUsMzE5MTgsMzE5MjMsMzE5MzE%3D&amp;from=groupmessage&amp;isappinstalled=0 深信服时间：未知 华为 其他Google Girl Hackathon报名截止时间：2019年3月6日23:59分 报名： https://mp.weixin.qq.com/s/7H9NBuRYAqNnRciF3m3Cng]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>实习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IOS开发 - 简单的计时器]]></title>
    <url>%2F2019%2F02%2F28%2FIOS%E5%BC%80%E5%8F%91%20-%20%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E6%97%B6%E5%99%A8%2F</url>
    <content type="text"><![CDATA[项目介绍 项目完全由代码所写，没有使用storyboard，代码更具有复现性。 手动部分：需要将图片拖入assets 项目知识SnapKit 布局经典的Swift版的第三方库，专门用于项目的自动布局，目前在github上的stars就高达9340颗星。 作者仍然是写Objective-C的第三方库Masonry的大牛 - @Robert Payne。 SnapKit配置1.github下载：https://github.com/SnapKit/SnapKit 2.将下载下来的SnapKit项目的 SnapKit.xcodeproj 拖进自己的项目目录最外层中 3.工程文件 -&gt; General -&gt; Embedded Binaries 中点击加号，添加SnapKit库到项目中来 4.command+B 重新编译项目 SnapKit使用123456789101112131415161718192021import UIKitimport SnapKit class ViewController: UIViewController &#123; // 1.定义box var box = UIView() override func viewDidLoad() &#123; super.viewDidLoad() box.backgroundColor = UIColor.orange // 2.将box加入父视图，之后的布局是相对于父视图布局的 self.view.addSubview(box) // 3. 添加布局的约束：上下左右、中心、 box.snp.makeConstraints &#123; (make) -&gt; Void in make.width.equalTo(100) make.height.equalTo(100) make.center.equalTo(self.view) &#125; &#125;&#125; Timer 计时器初始化1234self.timer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true ,block:&#123; (timer) in // withTimeInterval ： 的值0.1s 时间片后，执行的代码 // repeats : withTimeInterval的时间后，是否继续重复 &#125;) 启动：fire1self.timer.fire() 您可以使用此方法来触发重复计时器，而不会中断其常规的触发计划。 如果计时器不重复 repeats，则在触发后自动失效，即使其预定的触发日期尚未到达。 暂停：invalidate（移除计时循环）1self.timer.invalidate() 官方的解释是： This method is the only way to remove a timer from an NSRunLoop object. The NSRunLoop object removes and releases the timer, either just before the invalidate method returns or at some later point. 这是唯一一个把一个定时器从NSRunLoop object运行循环中移除的方法。 NSRunLoop object这个对象移除，并且release掉这个的定时器，或者是在这个invalidate方法返回的之前或是在之后的某个时间段，再进行移除并release操作。 guardguard 打头只判断合理条件，保证判断条件简约 guard xxx : 如果不满足gurad后面的条件xxx，则执行else的内部代码 详见 guard详解 源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146//// ViewController.swift// WatchDemo//// Created by iris on 2019/2/27.// Copyright © 2019 iris. All rights reserved.//// 学习：import UIKitimport SnapKitclass ViewController: UIViewController &#123; var timer:Timer! var resultLabel:UILabel! //计时器：文字显示 var resultNumber:Double = 0 //计时器：时间记录 override func viewDidLoad() &#123; super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. // 1.计时器的数字显示 // 1.1 数字的背景 let resultView = UIView() resultView.backgroundColor = UIColor.init(red: 0.0, green: 0.0, blue: 0.1, alpha: 1) // 注意：使用snp.makeConstraints方法的元素必须事先添加到父元素的中，例如：self.view.addSubview(view) self.view.addSubview(resultView) resultView.snp.makeConstraints&#123; (make) in make.top.equalTo(0) make.left.equalTo(0) make.height.equalTo(300) // 长度 300 make.width.equalTo(self.view.frame.width) &#125; // 1.2 数字的显示 resultLabel = UILabel() self.view.addSubview(resultLabel) resultLabel.textColor = UIColor.black resultView.addSubview(resultLabel) resultLabel.snp.makeConstraints&#123; (make) in make.center.equalTo(resultView) make.width.height.equalTo(140) make.width.equalTo(400) &#125; resultLabel.font = UIFont.init(name: "Helvetica Neue", size: 60) resultLabel.text = "0.0" resultLabel.textColor = UIColor .white // 设置字体对齐方式 resultLabel.textAlignment = NSTextAlignment.center // 2.开始按钮 // 2.1 开始按钮：背景 let startView = UIView() startView.backgroundColor = UIColor.init(red: 0.1, green: 0.0, blue: 0.8, alpha: 0.8) self.view.addSubview(startView) startView.snp.makeConstraints &#123; (make) in make.top.equalTo(300) make.left.equalTo(0) make.bottom.equalTo(0) make.width.equalTo(self.view.frame.width / 2) &#125; // 2.2 开始按钮：布局 let startButton:UIButton = UIButton() // startButton.setTitle("Start", for: UIControl.State.normal) startButton.setImage(UIImage (imageLiteralResourceName: "start"), for: UIControl.State.normal) startView.addSubview(startButton) startButton.snp.makeConstraints &#123; (make) in make.center.equalTo(startView) make.width.height.equalTo(50) &#125; // 2.3 开始按钮：点击事件添加 startButton.addTarget(self, action: #selector(startHander), for: UIControl.Event.touchUpInside) // 3 停止按钮 // 3.1 停止：背景 let stopView:UIView = UIView() stopView.backgroundColor = UIColor.init(red: 0.1, green: 0.8, blue: 0.0, alpha: 0.8) self.view.addSubview(stopView) stopView.snp.makeConstraints &#123; (make) in make.top.equalTo(300) make.bottom.equalTo(0) make.right.equalTo(0) make.width.equalTo(self.view.frame.width / 2) &#125; // 3.2 停止：按钮 let stopButton:UIButton = UIButton()// stopButton.setTitle("Stop", for: UIControl.State.normal) stopButton.setImage(UIImage (imageLiteralResourceName: "pause"), for: UIControl.State.normal) stopView.addSubview(stopButton) stopButton.snp.makeConstraints &#123; (make) in make.center.equalTo(stopView) make.width.height.equalTo(50) &#125; // 3.2 停止：按钮事件添加 stopButton.addTarget(self, action: #selector(stopHander), for: UIControl.Event.touchUpInside) // 4 重置 // 4.1 重置按钮 let resetButton:UIButton = UIButton() resetButton.setTitle("Reset", for: UIControl.State.normal) resetButton.titleLabel?.font = UIFont.init(name:"Helvetica Neue",size:20) resultView.addSubview(resetButton) resetButton.snp.makeConstraints &#123; (make) in make.right.equalTo(-10) make.top.equalTo(10) make.width.equalTo(100) make.height.equalTo(50) &#125; // 4.1 重置：事件监听 resetButton.addTarget(self, action: #selector(resetHander), for: UIControl.Event.touchUpInside) &#125; // 3个按钮的事件函数 // 1.开始计时 @objc func startHander()&#123; if self.timer != nil&#123; self.stopHander() &#125; self.timer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true,block:&#123; (timer) in self.resultNumber = self.resultNumber + 0.1 self.resultLabel.text = String(format:"%.1f",self.resultNumber) &#125;) self.timer.fire() &#125; // 2.暂停时间 @objc func stopHander()&#123; // 2.1 不进行判断的方法，可能出现异常，内存可能泄露// var timerForDistory:Timer!// timerForDistory = self.timer// timerForDistory.invalidate() // 2.2 进行判断的方法，可能出现异常，内存可能泄露 // guard 打头只判断合理条件，保证判断条件简约 // guard xxx : 如果不满足gurad后面的条件xxx，则执行else的内部代码 guard let timerForDistory = self.timer else &#123; return &#125; timerForDistory.invalidate() &#125; // 3.重置计时器 @objc func resetHander()&#123; self.resultNumber = 0 self.resultLabel.text = "0.0" &#125;&#125;]]></content>
      <categories>
        <category>IOS开发</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IOS开发 - 简单的加法计算器swift版本]]></title>
    <url>%2F2019%2F02%2F26%2FIOS%E5%BC%80%E5%8F%91%20-%20%E7%AE%80%E5%8D%95%E7%9A%84%E5%8A%A0%E6%B3%95%E8%AE%A1%E7%AE%97%E5%99%A8swift%E7%89%88%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[近日开始学习IOS开发。想找一个简单版本较新的IOS开发教程都很难：（1）现在找的很多都是object-C的，不是swift的，（2）老版与最新版本swift中很多语法也不适配，（3）Xcode版本和用法也不一样。 因此，今天自己写一个最简单的教程，用于swift入门，记录自己的学习。 基础步骤基础步骤就是项目类型、项目名称、项目位置的选取。 1.创建APP 2.项目类型为 简单的view 3.项目名称：加法计算器 4.结果 界面拖拽1、打开故事版，找到UI部件框，搜索需要的部件——输入框、Label、按钮 2、拖拽部件、部件位置布局、部件更名，右边为其结果 3、选择展示设备、选择运行设备、运行程序查看结果 4、运行结果，布局已经实现 功能实现输入框定义1、左右展示storyboard与ViewController文件，用于拖拉式实现部件定义和部件功能添加。 2、方式1：text部件定义，按住control，鼠标拖拽至ViewController对应空白处，接着添加名称以及修改属性。 方式2：输入语句，将代码前的空心点拖拽左边的UITextField @IBOutlet weak var sum: UITextField! 3、定以后的结果如下。 使用方式1拖拽num1，num2定义，使用代码和空心圈绑定至左边UITextField。 按钮功能1、添加Action作为响应 生成如下的代码，我们可以将功能函数写在calculate方法的代码内 2、编写计算的代码和清空的代码 1234567891011121314151617181920212223//计算方法//sum = num1+num2@IBAction func calculate(_ sender: Any) &#123; //1.Option类型转为String：XX! //2.String类型转为Int： Int(XX)! let value1:Float = Float(num1.text!)! let value2:Float = Float(num2.text!)! //3.Int类型转为String：String（XX） let result:String = String(value1+value2) //4.改变结果框的颜色 sum.textColor = UIColor .cyan //5.sum.text 展示的类型为String sum.text = result &#125;//重置方法@IBAction func reset(_ sender: Any) &#123; //清空输入框的内容 num1.text = "" num2.text = "" sum.text = ""&#125; 3、结果，可以实现浮点数相加的功能 项目源码ViewController代码123456789101112131415161718192021222324252627282930313233343536373839404142434445//// ViewController.swift// Calculation_add//// Created by iris on 2019/2/25.// Copyright © 2019 iris. All rights reserved.//import UIKitclass ViewController: UIViewController &#123; //UITextField的定义 @IBOutlet weak var num1: UITextField! @IBOutlet weak var num2: UITextField! @IBOutlet weak var sum: UITextField! override func viewDidLoad() &#123; super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. &#125; //计算方法 //sum = num1+num2 @IBAction func calculate(_ sender: Any) &#123; //1.Option类型转为String：XX! //2.String类型转为Int： Int(XX)! let value1:Float = Float(num1.text!)! let value2:Float = Float(num2.text!)! //3.Int类型转为String：String（XX） let result:String = String(value1+value2) //4.改变结果框的颜色 sum.textColor = UIColor .cyan //5.sum.text 展示的类型为String sum.text = result &#125; //重置方法 @IBAction func reset(_ sender: Any) &#123; //清空输入框的内容 num1.text = "" num2.text = "" sum.text = "" &#125;&#125; 下载资源 CSDN资源https://download.csdn.net/user/katherine_java/uploads]]></content>
      <categories>
        <category>IOS开发</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac系统下使用Hexo在Github上搭建博客]]></title>
    <url>%2F2019%2F02%2F23%2FMac%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[一、安装环节二、Hexo部署三、github仓库四、git代码]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工具整理 - 设计类工具]]></title>
    <url>%2F2019%2F02%2F19%2F%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86%20-%20%E8%AE%BE%E8%AE%A1%E7%B1%BB%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[设计icon：https://www.canva.cn/ 生成icon：https://appicon.co/ 海报： 阿里矢量图标：https://www.iconfont.cn/ 矢量图标：https://www.easyicon.net/update/]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
</search>
