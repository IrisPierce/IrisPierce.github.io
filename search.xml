<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[实习整理 - 未完待续]]></title>
    <url>%2F2019%2F03%2F04%2F%E5%AE%9E%E4%B9%A0%E6%95%B4%E7%90%86-%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD%2F</url>
    <content type="text"><![CDATA[实习的资料整理。 包括银行、互联网公司。 包括各公司的福利整合。 农业银行截止日期：3.20日宣传网页：https://i.eqxiu.com/s/iqd0XQ71?eqrcode=1&amp;share_level=5&amp;from_user=b819b53f-2d44-49e8-aa62-fa07f712a8ef&amp;from_id=c8995d88-6327-45bc-97dc-a4ad26ef27cb&amp;share_time=1551152498524&amp;from=timeline&amp;isappinstalled=0 福利工资17k。公积金5200。 农行总部编制 档案北京管理 北上广天成西 六地即可 扩招截止20年 这两年把握机会 进入顶级国企 全国统一待遇 当地公积金封顶 上海数据中心 部门 免费房子（一辈子） 招商银行时间：3.4-4.7内推网页：https://cmbjob.ccc.cmbchina.com/positionlistshare.html?v=3.0&amp;refereeId=847a71a8-f981-4d7a-abd3-d846ddef0634&amp;refereeCode=674440&amp;recruitType=3&amp;positionClass=&amp;deptId=003 福利180w行员贷款福利 招行有免费房子住的（只有一年） 腾讯时间：提前批3月9日，普招3.31 字节跳动时间：未知。一直在发布岗位，投递后5个工作日内安排面试内推码：6PFRDJMhttps://job.toutiao.com/2018/intern_referral/?token=5lT3rIxuAZuD18qmg3DYlg%3D%3D&amp;key=MjU4NDcsMzE5MTEsMzE5MTQsMzE5MTUsMzE5MTgsMzE5MjMsMzE5MzE%3D&amp;from=groupmessage&amp;isappinstalled=0 深信服时间：未知 其他Google Girl Hackathon报名截止时间：2019年3月6日23:59分 https://mp.weixin.qq.com/s/7H9NBuRYAqNnRciF3m3Cng]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>实习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IOS开发 - AutoLayout]]></title>
    <url>%2F2019%2F03%2F03%2FIOS%E5%BC%80%E5%8F%91-AutoLayout%2F</url>
    <content type="text"><![CDATA[项目介绍Xcode提供了两种方法定义Auto Layout的约束： Auto Layout工具栏 Control-drag 使用Auto Layout使label到中央Auto Layout工具栏提供了四个按钮： Stack - 组合views变成一个stack view Align - 构建对齐约束 Pin - 构建空间约束，例如UI的宽度，高度，边距等 Issues - 解决布局问题 使用Control-drag使得label到右下角用control+drag方法来添加spacing constraint。 按住control，从label上向右拖动，拖出label到视图后松开，出现弹框，选择 “Trailing space to container margin” ，表示设置右边距的约束。 类似2的方法，向下拖动松开，选择弹框中的”Vertical Spacing to Bottom Layout Guide”，表示设置了下边距约束。 所有约束线变成了蓝色实线，蓝色实线表示约束正常。 document outline上又出现两个约束 使用Auto Layou\Control-drag使得label水平居中，距离上边40]]></content>
      <categories>
        <category>IOS开发</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IOS开发 - 简单的计时器]]></title>
    <url>%2F2019%2F02%2F28%2FIOS%E5%BC%80%E5%8F%91-%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E6%97%B6%E5%99%A8%2F</url>
    <content type="text"><![CDATA[项目介绍 项目完全由代码所写，没有使用storyboard，代码更具有复现性。 手动部分：需要将图片拖入assets 项目知识SnapKit 布局经典的Swift版的第三方库，专门用于项目的自动布局，目前在github上的stars就高达9340颗星。 作者仍然是写Objective-C的第三方库Masonry的大牛 - @Robert Payne。 SnapKit配置1.github下载：https://github.com/SnapKit/SnapKit 2.将下载下来的SnapKit项目的 SnapKit.xcodeproj 拖进自己的项目目录最外层中 3.工程文件 -&gt; General -&gt; Embedded Binaries 中点击加号，添加SnapKit库到项目中来 4.command+B 重新编译项目 SnapKit使用123456789101112131415161718192021import UIKitimport SnapKit class ViewController: UIViewController &#123; // 1.定义box var box = UIView() override func viewDidLoad() &#123; super.viewDidLoad() box.backgroundColor = UIColor.orange // 2.将box加入父视图，之后的布局是相对于父视图布局的 self.view.addSubview(box) // 3. 添加布局的约束：上下左右、中心、 box.snp.makeConstraints &#123; (make) -&gt; Void in make.width.equalTo(100) make.height.equalTo(100) make.center.equalTo(self.view) &#125; &#125;&#125; Timer 计时器初始化1234self.timer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true ,block:&#123; (timer) in // withTimeInterval ： 的值0.1s 时间片后，执行的代码 // repeats : withTimeInterval的时间后，是否继续重复 &#125;) 启动：fire1self.timer.fire() 您可以使用此方法来触发重复计时器，而不会中断其常规的触发计划。 如果计时器不重复 repeats，则在触发后自动失效，即使其预定的触发日期尚未到达。 暂停：invalidate（移除计时循环）1self.timer.invalidate() 官方的解释是： This method is the only way to remove a timer from an NSRunLoop object. The NSRunLoop object removes and releases the timer, either just before the invalidate method returns or at some later point. 这是唯一一个把一个定时器从NSRunLoop object运行循环中移除的方法。 NSRunLoop object这个对象移除，并且release掉这个的定时器，或者是在这个invalidate方法返回的之前或是在之后的某个时间段，再进行移除并release操作。 guardguard 打头只判断合理条件，保证判断条件简约 guard xxx : 如果不满足gurad后面的条件xxx，则执行else的内部代码 详见 guard详解 源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146//// ViewController.swift// WatchDemo//// Created by iris on 2019/2/27.// Copyright © 2019 iris. All rights reserved.//// 学习：import UIKitimport SnapKitclass ViewController: UIViewController &#123; var timer:Timer! var resultLabel:UILabel! //计时器：文字显示 var resultNumber:Double = 0 //计时器：时间记录 override func viewDidLoad() &#123; super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. // 1.计时器的数字显示 // 1.1 数字的背景 let resultView = UIView() resultView.backgroundColor = UIColor.init(red: 0.0, green: 0.0, blue: 0.1, alpha: 1) // 注意：使用snp.makeConstraints方法的元素必须事先添加到父元素的中，例如：self.view.addSubview(view) self.view.addSubview(resultView) resultView.snp.makeConstraints&#123; (make) in make.top.equalTo(0) make.left.equalTo(0) make.height.equalTo(300) // 长度 300 make.width.equalTo(self.view.frame.width) &#125; // 1.2 数字的显示 resultLabel = UILabel() self.view.addSubview(resultLabel) resultLabel.textColor = UIColor.black resultView.addSubview(resultLabel) resultLabel.snp.makeConstraints&#123; (make) in make.center.equalTo(resultView) make.width.height.equalTo(140) make.width.equalTo(400) &#125; resultLabel.font = UIFont.init(name: "Helvetica Neue", size: 60) resultLabel.text = "0.0" resultLabel.textColor = UIColor .white // 设置字体对齐方式 resultLabel.textAlignment = NSTextAlignment.center // 2.开始按钮 // 2.1 开始按钮：背景 let startView = UIView() startView.backgroundColor = UIColor.init(red: 0.1, green: 0.0, blue: 0.8, alpha: 0.8) self.view.addSubview(startView) startView.snp.makeConstraints &#123; (make) in make.top.equalTo(300) make.left.equalTo(0) make.bottom.equalTo(0) make.width.equalTo(self.view.frame.width / 2) &#125; // 2.2 开始按钮：布局 let startButton:UIButton = UIButton() // startButton.setTitle("Start", for: UIControl.State.normal) startButton.setImage(UIImage (imageLiteralResourceName: "start"), for: UIControl.State.normal) startView.addSubview(startButton) startButton.snp.makeConstraints &#123; (make) in make.center.equalTo(startView) make.width.height.equalTo(50) &#125; // 2.3 开始按钮：点击事件添加 startButton.addTarget(self, action: #selector(startHander), for: UIControl.Event.touchUpInside) // 3 停止按钮 // 3.1 停止：背景 let stopView:UIView = UIView() stopView.backgroundColor = UIColor.init(red: 0.1, green: 0.8, blue: 0.0, alpha: 0.8) self.view.addSubview(stopView) stopView.snp.makeConstraints &#123; (make) in make.top.equalTo(300) make.bottom.equalTo(0) make.right.equalTo(0) make.width.equalTo(self.view.frame.width / 2) &#125; // 3.2 停止：按钮 let stopButton:UIButton = UIButton()// stopButton.setTitle("Stop", for: UIControl.State.normal) stopButton.setImage(UIImage (imageLiteralResourceName: "pause"), for: UIControl.State.normal) stopView.addSubview(stopButton) stopButton.snp.makeConstraints &#123; (make) in make.center.equalTo(stopView) make.width.height.equalTo(50) &#125; // 3.2 停止：按钮事件添加 stopButton.addTarget(self, action: #selector(stopHander), for: UIControl.Event.touchUpInside) // 4 重置 // 4.1 重置按钮 let resetButton:UIButton = UIButton() resetButton.setTitle("Reset", for: UIControl.State.normal) resetButton.titleLabel?.font = UIFont.init(name:"Helvetica Neue",size:20) resultView.addSubview(resetButton) resetButton.snp.makeConstraints &#123; (make) in make.right.equalTo(-10) make.top.equalTo(10) make.width.equalTo(100) make.height.equalTo(50) &#125; // 4.1 重置：事件监听 resetButton.addTarget(self, action: #selector(resetHander), for: UIControl.Event.touchUpInside) &#125; // 3个按钮的事件函数 // 1.开始计时 @objc func startHander()&#123; if self.timer != nil&#123; self.stopHander() &#125; self.timer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true,block:&#123; (timer) in self.resultNumber = self.resultNumber + 0.1 self.resultLabel.text = String(format:"%.1f",self.resultNumber) &#125;) self.timer.fire() &#125; // 2.暂停时间 @objc func stopHander()&#123; // 2.1 不进行判断的方法，可能出现异常，内存可能泄露// var timerForDistory:Timer!// timerForDistory = self.timer// timerForDistory.invalidate() // 2.2 进行判断的方法，可能出现异常，内存可能泄露 // guard 打头只判断合理条件，保证判断条件简约 // guard xxx : 如果不满足gurad后面的条件xxx，则执行else的内部代码 guard let timerForDistory = self.timer else &#123; return &#125; timerForDistory.invalidate() &#125; // 3.重置计时器 @objc func resetHander()&#123; self.resultNumber = 0 self.resultLabel.text = "0.0" &#125;&#125;]]></content>
      <categories>
        <category>IOS开发</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IOS开发 - 每日一个Swift小程序]]></title>
    <url>%2F2019%2F02%2F26%2FIOS%E5%BC%80%E5%8F%91-%E6%AF%8F%E6%97%A5%E4%B8%80%E4%B8%AASwift%E5%B0%8F%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[swift学习日记——每日一个小程序 名称：30DaysofSwift 工具： Xcode 10.1, Swift 4.2, UIKit 思路来源：samvlu ，Allen_朝辉，nimomeng 用例方面：主要参考nimomeng的case，也参考了Sam Lu的40个小项目，也参考了Allen_朝辉的项目 代码方面：前两个项目学习了Storyboard，然而实际上多人协作的项目中我们尽可能少用Storyboard，因为很容易出现冲突问题。况且从学习的角度，storyboard很难说清楚操作步骤是什么。因此以后的项目都尽量手写。 开源项目：暂未整理完成 Project 3 : 计时器 Change Custom Font 学习内容： SnapKit：项目的自动布局 Timer 计时器：fire()与invalidate() guard语句：guard 判断合理条件，保证判断条件简约。详见 guard详解 Project 2 : 改变字体 Change Custom Font 学习内容： 获取字体属性：UIFont.familyNames可以存储为数组，可以直接输出、或通过索引获取 随机获取字体：随机数arc4random()格式为UInt32，需转为Int，再对数组长度取余。获得范围随机数 字体设置：words.font=UIFont(name: “字体名称”, size: 20) 按钮边框设置：圆角cornerRadius，颜色borderColor，该颜色需要CGColor，因此需要将UIColor转为CGColor 源码： 1234567891011121314151617181920212223242526272829303132333435363738394041//// ViewController.swift// ChangeCustomFont//// Created by iris on 2019/2/25.// Copyright © 2019 iris. All rights reserved.//import UIKitclass ViewController: UIViewController &#123; @IBOutlet weak var words: UILabel! @IBOutlet weak var change: UIButton! override func viewDidLoad() &#123; super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. // 按钮的边框粗细、圆角、颜色 // 注：颜色需要CGColor，因此需要将UIColor转为CGColor change.layer.borderWidth = 1; change.layer.cornerRadius = 8; change.layer.borderColor = UIColor.blue.cgColor &#125; // 字体改变：根据随机数，随机获取系统字体的第i个 @IBAction func change(_ sender: Any) &#123; // 1.存储字体名称y为数组 let familyNames_arr = UIFont.familyNames let count:Int = familyNames_arr.count // 2.获取随机数 // 平常的随机数：0 ~ X,UInt32格式，需要转为Int let random1:Int = Int(arc4random()) // 限制长度的随机数，取余 ：0 ~ X let random2:Int = random1 % count // 3.设置字体为第 随机数 的字体 print(familyNames_arr[random2]) words.font=UIFont(name: familyNames_arr[random2], size: 20) &#125;&#125; Project 1 : 加法计算器 Calculation of Add 学习内容： IOS的UI布局：使用Storyboard和其辅助视图添加部件，且为部件定义，加上动作 值的转化：Option获取 -&gt; String -&gt; Float计算 -&gt; String展示]]></content>
      <categories>
        <category>IOS开发</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IOS开发 - 简单的加法计算器swift版本]]></title>
    <url>%2F2019%2F02%2F26%2FIOS%E5%BC%80%E5%8F%91-%E7%AE%80%E5%8D%95%E7%9A%84%E5%8A%A0%E6%B3%95%E8%AE%A1%E7%AE%97%E5%99%A8swift%E7%89%88%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[近日开始学习IOS开发。想找一个简单版本较新的IOS开发教程都很难：（1）现在找的很多都是object-C的，不是swift的，（2）老版与最新版本swift中很多语法也不适配，（3）Xcode版本和用法也不一样。 因此，今天自己写一个最简单的教程，用于swift入门，记录自己的学习。 基础步骤基础步骤就是项目类型、项目名称、项目位置的选取。 1.创建APP 2.项目类型为 简单的view 3.项目名称：加法计算器 4.结果 界面拖拽1、打开故事版，找到UI部件框，搜索需要的部件——输入框、Label、按钮 2、拖拽部件、部件位置布局、部件更名，右边为其结果 3、选择展示设备、选择运行设备、运行程序查看结果 4、运行结果，布局已经实现 功能实现输入框定义1、左右展示storyboard与ViewController文件，用于拖拉式实现部件定义和部件功能添加。 2、方式1：text部件定义，按住control，鼠标拖拽至ViewController对应空白处，接着添加名称以及修改属性。 方式2：输入语句，将代码前的空心点拖拽左边的UITextField @IBOutlet weak var sum: UITextField! 3、定以后的结果如下。 使用方式1拖拽num1，num2定义，使用代码和空心圈绑定至左边UITextField。 按钮功能1、添加Action作为响应 生成如下的代码，我们可以将功能函数写在calculate方法的代码内 2、编写计算的代码和清空的代码 1234567891011121314151617181920212223//计算方法//sum = num1+num2@IBAction func calculate(_ sender: Any) &#123; //1.Option类型转为String：XX! //2.String类型转为Int： Int(XX)! let value1:Float = Float(num1.text!)! let value2:Float = Float(num2.text!)! //3.Int类型转为String：String（XX） let result:String = String(value1+value2) //4.改变结果框的颜色 sum.textColor = UIColor .cyan //5.sum.text 展示的类型为String sum.text = result &#125;//重置方法@IBAction func reset(_ sender: Any) &#123; //清空输入框的内容 num1.text = "" num2.text = "" sum.text = ""&#125; 3、结果，可以实现浮点数相加的功能 项目源码ViewController代码123456789101112131415161718192021222324252627282930313233343536373839404142434445//// ViewController.swift// Calculation_add//// Created by iris on 2019/2/25.// Copyright © 2019 iris. All rights reserved.//import UIKitclass ViewController: UIViewController &#123; //UITextField的定义 @IBOutlet weak var num1: UITextField! @IBOutlet weak var num2: UITextField! @IBOutlet weak var sum: UITextField! override func viewDidLoad() &#123; super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. &#125; //计算方法 //sum = num1+num2 @IBAction func calculate(_ sender: Any) &#123; //1.Option类型转为String：XX! //2.String类型转为Int： Int(XX)! let value1:Float = Float(num1.text!)! let value2:Float = Float(num2.text!)! //3.Int类型转为String：String（XX） let result:String = String(value1+value2) //4.改变结果框的颜色 sum.textColor = UIColor .cyan //5.sum.text 展示的类型为String sum.text = result &#125; //重置方法 @IBAction func reset(_ sender: Any) &#123; //清空输入框的内容 num1.text = "" num2.text = "" sum.text = "" &#125;&#125; 下载资源 CSDN资源https://download.csdn.net/user/katherine_java/uploads]]></content>
      <categories>
        <category>IOS开发</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac系统下使用Hexo在Github上搭建博客]]></title>
    <url>%2F2019%2F02%2F23%2FMac%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[一、安装环节二、Hexo部署三、github仓库四、git代码]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
